// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
//  Created by Sam Deane on 19/02/20.
//  All code (c) 2020 - present day, Elegant Chaos Limited.
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

import Foundation
import ApplicationExtensions

public struct Workflow {
    public let repo: Repo
    public let source: String
    public let data: Data
    public let header: String
    public let delimiter: String
}

public class SwiftVersion: Option {
    public enum XcodeMode {
        case latest
        case toolchain(branch: String)
    }
    
    let linux: String
    let mac: XcodeMode
    
    public init(_ id: String, name: String, linux: String, mac: XcodeMode) {
        self.linux = linux
        self.mac = mac
        super.init(id, name: name)
    }
}

public class WorkflowGenerator {
    public let swifts = [
        SwiftVersion("swift-50", name: "Swift 5.0", linux: "swift:5.0", mac: .latest),
        SwiftVersion("swift-51", name: "Swift 5.1", linux: "swift:5.1", mac: .latest),
        SwiftVersion("swift-52", name: "Swift 5.2 (nightly)", linux: "swiftlang/swift:nightly-5.2", mac: .toolchain(branch: "swift-5.2-branch")),
        SwiftVersion("swift-nightly", name: "Swift Nightly", linux: "swiftlang/swift:nightly", mac: .toolchain(branch: "swift-5.2-branch")), // TODO: use correct branch
    ]
    
    public let platforms = [
        Job("macOS", name: "macOS"),
        Job("macOS-xcode", name: "macOS (xcodebuild)", xcodeDestination: ""),
        Job("iOS", name: "iOS", xcodeDestination: "iPhone 11"),
        Job("tvOS", name: "tvOS", xcodeDestination: "Apple TV"),
        Job("watchOS", name: "watchOS", xcodeDestination: "Apple Watch Series 5 - 44mm"),
        Job("linux", name: "Linux"),
    ]
    
    public let configurations = [
        Option("debug", name: "Debug"),
        Option("release", name: "Release")
    ]
    
    public let general = [
        Option("build", name: "Perform Build"),
        Option("test", name: "Run Tests"),
        Option("notify", name: "Post Notifications"),
        Option("upload", name: "Upload Logs"),
        Option("header", name: "Add a header to README.md")
    ]
    
    public init() {
    }
    
    func enabledSwifts(for repo: Repo) -> [SwiftVersion] {
        let options = repo.settings.options
        var enabled: [SwiftVersion] = []
        for swift in swifts {
            if options.contains(swift.id) {
                enabled.append(swift)
            }
        }
        return enabled
    }
    
    func enabledJobs(for repo: Repo) -> [Job] {
        let options = repo.settings.options
        var jobs: [Job] = []
        for platform in platforms {
            if options.contains(platform.id) {
                jobs.append(platform)
            }
        }
        
        return jobs
    }

    func enabledConfigs(for repo: Repo) -> [String] {
        let options = repo.settings.options
        return configurations.filter({ options.contains($0.id) }).map({ $0.name })
    }

    public func toggleSet(for options: [Option], in settings: WorkflowSettings) -> [Bool] {
        var toggles: [Bool] = []
        for option in options {
            toggles.append(settings.options.contains(option.id))
        }
        return toggles
    }
    
    public func enabledIdentifiers(for options: [Option], toggleSet toggles: [Bool]) -> [String] {
        var identifiers: [String] = []
        for n in 0 ..< options.count {
            if toggles[n] {
                identifiers.append(options[n].id)
            }
        }
        return identifiers
    }
    
    public func generateWorkflow(for repo: Repo, application: BundleInfo) -> Workflow? {
        var source =
        """
        # --------------------------------------------------------------------------------
        # This workflow was automatically generated by Action Status \(application.fullVersionString).
        # (see https://actionstatus.elegantchaos.com for more details)
        # --------------------------------------------------------------------------------
        
        name: \(repo.workflow)
        
        on: [push, pull_request]
        
        jobs:
        
        """
        
        let swiftVersions = enabledSwifts(for: repo)
        let jobs = enabledJobs(for: repo)
        
        var platformBadgeIDs: [String] = []
        var platformBadgeNames: [String] = []
        for job in jobs {
            source.append(job.yaml(repo: repo, swifts: swiftVersions, configurations: enabledConfigs(for: repo)))
            platformBadgeNames.append(job.name)
            platformBadgeIDs.append(job.id)
        }
        
        let platformNames = platformBadgeNames.joined(separator: ", ")
        let badges = swiftVersions.map { "![swift \($0) shield]" }.joined(separator: " ")
        
        var header = ""
        let headerDelimiter = "[comment]: <> (End of ActionStatus Header)\n\n"
        if repo.settings.header {
            header += """
                [comment]: <> (Header Generated by ActionStatus \(application.versionString) - \(application.build))
                
                [![Test results][tests shield]][actions] [![Latest release][release shield]][releases] [\(badges)][swift] ![Platforms: \(platformNames)][platforms shield]

                [release shield]: \(repo.imgShieldURL(for: .release))
                [swift 5.0 shield]: \(repo.imgShieldURL(for: .swift50)) "Swift 5.0"
                [swift 5.1 shield]: \(repo.imgShieldURL(for: .swift51)) "Swift 5.1"
                [swift 5.2 shield]: \(repo.imgShieldURL(for: .swift52)) "Swift 5.2"
                [platforms shield]: \(repo.imgShieldURL(forPlatforms: platformBadgeIDs)) "\(platformNames)"

                [swift]: https://swift.org
                [releases]: \(repo.githubURL(for: .releases))
                [actions]: \(repo.githubURL(for: .actions))
                [tests shield]: \(repo.githubURL(for: .badge))

                \(headerDelimiter)
                """
        }
        
        guard let data = source.data(using: .utf8) else { return nil }
        return Workflow(repo: repo, source: source, data: data, header: header, delimiter: headerDelimiter)
    }
}
