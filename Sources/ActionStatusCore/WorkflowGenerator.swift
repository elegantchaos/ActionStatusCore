// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
//  Created by Sam Deane on 19/02/20.
//  All code (c) 2020 - present day, Elegant Chaos Limited.
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

import Foundation
import ApplicationExtensions

public struct Workflow {
    public let repo: Repo
    public let source: String
    public let data: Data
    public let header: String
    public let delimiter: String
}

public class WorkflowGenerator {
    static let enableLinuxMain = false

    public let platforms = [
        Job("macOS", name: "macOS", platform: .mac, swift: "5.1"),  // TODO: find better way of determining Mac swift version
        Job("iOS", name: "iOS", platform: .mac, swift: "5.1"),  // TODO: find better way of determining Mac swift version
        Job("tvOS", name: "tvOS", platform: .mac, swift: "5.1"),  // TODO: find better way of determining Mac swift version
        Job("watchOS", name: "watchOS", platform: .mac, swift: "5.1"),  // TODO: find better way of determining Mac swift version
        Job("linux-50", name: "Linux (Swift 5.0)", container: "swift:5.0", swift: "5.0"),
        Job("linux-51", name: "Linux (Swift 5.1)", container: "swift:5.1", swift: "5.1"),
        Job("linux-52", name: "Linux (Swift 5.2 Nightly)", container: "swiftlang/swift:nightly-5.2", swift: "5.2"),
        Job("linux-n", name: "Linux (Swift Nightly)", container: "swiftlang/swift:nightly", swift: "5.2"),
    ]
    
    public let configurations = [
        Option("debug", name: "Debug"),
        Option("release", name: "Release")
    ]
    
    public let general = [
        Option("build", name: "Perform Build"),
        Option("test", name: "Run Tests"),
        Option("notify", name: "Post Notifications"),
        Option("upload", name: "Upload Logs"),
        Option("useXcodeForMac", name: "Use Xcode For macOS Target"),
        Option("header", name: "Add a header to README.md")
    ]
    
    public init() {
    }
    
    func enabledJobs(for repo: Repo) -> ([Job], [String]) {
        let options = repo.settings.options
        var jobs: [Job] = []
        var macPlatforms: [String] = []
        var versions: Set<String> = []
        for platform in platforms {
            if options.contains(platform.id) {
                versions.insert(platform.swift)
                switch platform.platform {
                    case .mac:
                        macPlatforms.append(platform.id)
                    default:
                        jobs.append(platform)
                }
            }
        }
        
        if macPlatforms.count > 0 {
            let macID = macPlatforms.joined(separator: "_")
            let macName = macPlatforms.joined(separator: ", ")
            
            // unless useXcodeForMac is set, remove macOS from the platforms built with xCode
            if !repo.settings.useXcodeForMac, let index = macPlatforms.firstIndex(of: "macOS") {
                macPlatforms.remove(at: index)
            }
            
            // make a catch-all job
            jobs.append(
                Job(macID, name: macName, platform: .mac, xcodePlatforms: macPlatforms, swift: "5.1") // TODO: find better way of determining Mac swift version
            )
        }
        
        let sortedVersions = versions.sorted()
        return (jobs, sortedVersions)
    }

    func enabledConfigs(for repo: Repo) -> [String] {
        let options = repo.settings.options
        return configurations.filter({ options.contains($0.id) }).map({ $0.name })
    }

    public func toggleSet(for options: [Option], in settings: WorkflowSettings) -> [Bool] {
        var toggles: [Bool] = []
        for option in options {
            toggles.append(settings.options.contains(option.id))
        }
        return toggles
    }
    
    public func enabledIdentifiers(for options: [Option], toggleSet toggles: [Bool]) -> [String] {
        var identifiers: [String] = []
        for n in 0 ..< options.count {
            if toggles[n] {
                identifiers.append(options[n].id)
            }
        }
        return identifiers
    }
    
    public func generateWorkflow(for repo: Repo, application: BundleInfo) -> Workflow? {
        var source =
        """
        # --------------------------------------------------------------------------------
        # This workflow was automatically generated by Action Status \(application.fullVersionString).
        # (see https://actionstatus.elegantchaos.com for more details)
        # --------------------------------------------------------------------------------
        
        name: \(repo.workflow)
        
        on: [push, pull_request]
        
        jobs:
        
        """
        
        let (jobs, swiftVersions) = enabledJobs(for: repo)
        
        let needsLinuxMain = WorkflowGenerator.enableLinuxMain && repo.settings.test && jobs.contains(where: { $0.platform == .linux })
        if needsLinuxMain {
            source.append("""

            update-linuxmain:
                name: Update Linux Main
                runs-on: macOS-latest
                steps:
                - name: Checkout
                  uses: actions/checkout@v1
                - name: Update
                  run: swift test --generate-linuxmain
                - name: Commit Changes
                  continue-on-error: true
                  run: |
                    git config --local user.email "action@github.com"
                    git config --local user.name "GitHub Action"
                    git commit -m "Updated Linux Main" -a
                - name: Push changes
                  continue-on-error: true
                  uses: ad-m/github-push-action@master
                  with:
                    github_token: ${{ secrets.GITHUB_TOKEN }}


        """
            )
        }
        
        var platformBadgeIDs: [String] = []
        var platformBadgeNames: [String] = []
        for job in jobs {
            source.append(job.yaml(repo: repo, configurations: enabledConfigs(for: repo)))
            if job.platform == .linux {
                if !platformBadgeNames.contains("Linux") {
                    platformBadgeNames.append("Linux")
                    platformBadgeIDs.append("Linux")
                }
            } else {
                platformBadgeNames.append(job.name)
                platformBadgeIDs.append(job.id)
            }
        }
        
        let platformNames = platformBadgeNames.joined(separator: ", ")
        let badges = swiftVersions.map { "![swift \($0) shield]" }.joined(separator: " ")
        
        var header = ""
        let headerDelimiter = "[comment]: <> (End of ActionStatus Header)\n\n"
        if repo.settings.header {
            header += """
                [comment]: <> (Header Generated by ActionStatus \(application.versionString) - \(application.build))
                
                [![Test results][tests shield]][actions] [![Latest release][release shield]][releases] [\(badges)][swift] ![Platforms: \(platformNames)][platforms shield]

                [release shield]: \(repo.imgShieldURL(for: .release))
                [swift 5.0 shield]: \(repo.imgShieldURL(for: .swift50)) "Swift 5.0"
                [swift 5.1 shield]: \(repo.imgShieldURL(for: .swift51)) "Swift 5.1"
                [swift 5.2 shield]: \(repo.imgShieldURL(for: .swift52)) "Swift 5.2"
                [platforms shield]: \(repo.imgShieldURL(forPlatforms: platformBadgeIDs)) "\(platformNames)"

                [swift]: https://swift.org
                [releases]: \(repo.githubURL(for: .releases))
                [actions]: \(repo.githubURL(for: .actions))
                [tests shield]: \(repo.githubURL(for: .badge))

                \(headerDelimiter)
                """
        }
        
        guard let data = source.data(using: .utf8) else { return nil }
        return Workflow(repo: repo, source: source, data: data, header: header, delimiter: headerDelimiter)
    }
}
